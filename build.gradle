buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:4.8.0.201706111038-r'
    }
}

plugins {
    id "java-library"
    id "groovy"
    id "maven-publish"
    id "signing"
}

repositories {
    mavenCentral()
}

group = 'net.rubygrapefruit'
def nextVersion = '0.5'
version = "${nextVersion}-dev"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    testImplementation 'org.apache.groovy:groovy-all:4.0.24'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testImplementation 'org.spockframework:spock-junit4:2.3-groovy-4.0'
    testImplementation 'junit:junit:4.13.2'
}

test {
    useJUnitPlatform()
}

def releaseWorkDir = layout.buildDirectory.dir("release")
def publicationDir = releaseWorkDir.map { it.dir("publication") }

publishing {
    repositories {
        maven {
            url = publicationDir
        }
    }
    publications {
        maven(MavenPublication) {
            pom {
                name = 'ansi-control-sequence-util'
                description = 'A library of utilities for parsing text that contains ANSI control sequences'
                url = 'https://github.com/adammurdoch/ansi-control-sequence-util'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'adam'
                        name = 'Adam Murdoch'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/adammurdoch/ansi-control-sequence-util.git'
                    url = 'https://github.com/adammurdoch/ansi-control-sequence-util'
                }
            }
            from components.java
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.maven
}

task upload {
    dependsOn tasks.publishMavenPublicationToMavenRepository
    def zipFile = releaseWorkDir.map { it.file("bundle.zip") }
    doLast {
        def username = System.getenv("MAVEN_CENTRAL_USERNAME")
        def password = System.getenv("MAVEN_CENTRAL_PASSWORD")
        if (username == null || password == null) {
            throw new IllegalArgumentException("Environment variables MAVEN_CENTRAL_USERNAME and MAVEN_CENTRAL_PASSWORD must be set.")
        }
        def authToken = Base64.encoder.withoutPadding().encodeToString("$username:$password".bytes)

        def zip = zipFile.get().asFile
        zip.delete()
        exec {
            commandLine = ["zip", "-r", "-q", zip.path, "."]
            workingDir = publicationDir.get().asFile
        }

        exec {
            commandLine = [
                    "curl",
                    "--request", "POST",
                    "--verbose",
                    "--fail",
                    "--header", "Authorization: Bearer $authToken",
                    "--form", "bundle=@$zip",
                    "https://central.sonatype.com/api/v1/publisher/upload"
            ]
        }
    }
}

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.storage.file.FileRepositoryBuilder

import java.util.regex.Pattern

def tagName = objects.property(String)

task tag {
    doLast {
        def repo = new FileRepositoryBuilder().setWorkTree(projectDir).build()
        try {
            def git = new Git(repo)
            git.tag().setName(tagName.get()).call()
        } finally {
            repo.close()
        }
    }
}

task incrementVersion {
    doLast {
        def matcher = Pattern.compile("(\\d+)\\.(\\d+)").matcher(nextVersion)
        if (!matcher.matches()) {
            throw new RuntimeException("Could not parse version")
        }
        def newVersion = matcher.group(1) + "." + (Integer.parseInt(matcher.group(2)) + 1)
        buildFile.text = buildFile.text.replace("nextVersion = '${nextVersion}'", "nextVersion = '${newVersion}'")
        def repo = new FileRepositoryBuilder().setWorkTree(projectDir).build()
        try {
            def git = new Git(repo)
            git.add().addFilepattern("build.gradle").call()
            git.commit().setMessage("Incremented next version to ${newVersion}").call()
        } finally {
            repo.close()
        }
    }
}

publishMavenPublicationToMavenRepository.mustRunAfter(test)
tag.mustRunAfter(upload)
incrementVersion.mustRunAfter(tag)
incrementVersion.mustRunAfter(publish)

// Run with -Psigning.gnupg.keyName=
task release {
    dependsOn check, tag, upload, incrementVersion
    group = 'release'
    description = 'release the next version'
}

gradle.taskGraph.whenReady {
    if (it.allTasks.contains(release)) {
        project.version = nextVersion
    }
    tagName.set("v${project.version}")
}